"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAbsolute = isAbsolute;
exports.isModule = isModule;
exports.isRelativeToParent = isRelativeToParent;
exports.isIndex = isIndex;
exports.isRelativeToSibling = isRelativeToSibling;
exports.isRegularExpressionGroup = isRegularExpressionGroup;
exports.determineImportType = determineImportType;
function isAbsolute(name) {
    return name.indexOf('/') === 0;
}
var moduleRegExp = /^[^/\\.]/;
function isModule(name) {
    return moduleRegExp.test(name);
}
function isRelativeToParent(name) {
    return /^\.\.[\\/]/.test(name);
}
var indexFiles = ['.', './', './index', './index.js', './index.ts'];
function isIndex(name) {
    return indexFiles.indexOf(name) !== -1;
}
function isRelativeToSibling(name) {
    return /^\.[\\/]/.test(name);
}
function isRegularExpressionGroup(group) {
    return !!group && group[0] === '/' && group[group.length - 1] === '/' && group.length > 1;
}
function determineImportType(_a) {
    var name = _a.name, regExpGroups = _a.regExpGroups, importKind = _a.importKind, _b = _a.treatTypesAsGroup, treatTypesAsGroup = _b === void 0 ? false : _b;
    if (treatTypesAsGroup && importKind === 'type')
        return 'type';
    var matchingRegExpGroup = regExpGroups.find(function (_a) {
        var _groupName = _a[0], regExp = _a[1];
        return regExp.test(name);
    });
    if (matchingRegExpGroup)
        return matchingRegExpGroup[0];
    if (isAbsolute(name))
        return 'absolute';
    if (isModule(name))
        return 'module';
    if (isRelativeToParent(name))
        return 'parent';
    if (isIndex(name))
        return 'index';
    if (isRelativeToSibling(name))
        return 'sibling';
    return 'unknown';
}
